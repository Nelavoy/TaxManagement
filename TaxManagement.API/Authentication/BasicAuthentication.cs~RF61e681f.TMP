using Microsoft.AspNetCore.Authentication;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using System.Security.Claims;
using System.Text.Encodings.Web;
using System.Threading.Tasks;

namespace TaxManagement.API.Authentication
{
    public class BasicAuthenticationHandler : AuthenticationHandler<AuthenticationSchemeOptions>
    {
        private readonly IConfiguration _config;
        public BasicAuthenticationHandler(
              IOptionsMonitor<AuthenticationSchemeOptions> options,
              ILoggerFactory logger,
              UrlEncoder encoder,
              ISystemClock clock,
              IConfiguration config
           )
              : base(options, logger, encoder, clock)
        {
            _config = config;
        }
        protected override async Task<AuthenticateResult> HandleAuthenticateAsync()
        {
            if (!Request.Headers.ContainsKey("my-api-key"))
                return AuthenticateResult.Fail("Missing ApiKey");

            string authHeader = Request.Headers["my-api-key"];

            if (authHeader != _config["ApiKey"])
                return AuthenticateResult.Fail("ApiKey is invalid");

            var claims = new[] { new Claim(ClaimTypes.NameIdentifier, "TestUser") };
            var identity = new ClaimsIdentity(claims, Scheme.Name);
            var principal = new ClaimsPrincipal(identity);
            var ticket = new AuthenticationTicket(principal, Scheme.Name);
            return await Task.FromResult(AuthenticateResult.Success(ticket));
        }
    }
}
